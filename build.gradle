plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.5.21'
    id 'maven'
    id 'org.jetbrains.dokka' version '1.5.0'
    id 'org.ajoberstar.git-publish' version '3.0.0'
}

group 'br.com.gamemods'
version '3.0.0-SNAPSHOT'

sourceSets.main.java.srcDirs = ["src/main/kotlin"]

sourceCompatibility = 1.8
targetCompatibility = sourceCompatibility

repositories {
    mavenCentral()
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation group: 'org.jetbrains.kotlin', name: 'kotlin-reflect'
    testCompile "org.jetbrains.kotlin:kotlin-test"
    testCompile "org.jetbrains.kotlin:kotlin-test-junit"
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

install {
    repositories.mavenInstaller {
        pom.project {
            packaging 'jar'
            groupId project.group
            artifactId project.name
            version project.version
            name project.name
            description "A kotlin/java lib that allows you to read and write NBT data in a clean way"
            url "https://github.com/GameModsBR/NBT-Manipulator"
            inceptionYear '2020'
            licenses {
                license {
                    name 'MIT'
                    url 'https://raw.githubusercontent.com/GameModsBR/NBT-Manipulator/master/LICENSE'
                    distribution 'repo'
                }
            }
            developers {
                developer {
                    id = 'joserobjr'
                    name = 'José Roberto de Araújo Júnior'
                    email = 'joserobjr@gamemods.com.br'
                }
            }
            scm {
                connection "https://github.com/GameModsBR/NBT-Manipulator.git"
                developerConnection "https://github.com/GameModsBR/NBT-Manipulator.git"
                url "https://github.com/GameModsBR/NBT-Manipulator"
            }
        }
    }
}

tasks.dokkaGfm.configure {
    outputDirectory.set(new File(buildDir, "kdoc"))
}

import java.nio.file.Files
import java.nio.file.Paths
import java.nio.file.StandardCopyOption
task createReadmeFiles(dependsOn: dokkaGfm) {
    doFirst {
        Files.walk(Paths.get(dokkaGfm.outputDirectory.get()))
                .filter { it.getFileName().toString().toLowerCase() == "index.md" }
                .forEach {
                    try {
                        Files.copy(it, it.resolveSibling("README.md"), StandardCopyOption.REPLACE_EXISTING)
                    } catch (Throwable e) {
                        throw new RuntimeException(e)
                    }
                }
    }
}

task createIndexMd(type: Copy) {
    from file("$projectDir/README.md")
    into "$buildDir/pages"
    rename 'README.md', 'index.md'
}

task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
    archiveClassifier.set('javadoc')
    from dokkaJavadoc.outputDirectory
    from file("$projectDir/LICENSE")
    from file("$projectDir/README.md")
    from file("$projectDir/CHANGELOG.md")
}

task sourcesJar(type: Jar) {
    from sourceSets.main.java.srcDirs
    from file("$projectDir/build.gradle")
    from file("$projectDir/gradle.properties")
    from file("$projectDir/settings.gradle")
    from file("$projectDir/LICENSE")
    from file("$projectDir/README.md")
    from file("$projectDir/CHANGELOG.md")
    archiveClassifier.set('sources')
}

jar {
    from file("$projectDir/LICENSE")
    from file("$projectDir/README.md")
    from file("$projectDir/CHANGELOG.md")
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

if (ext.has('org.ajoberstar.grgit.auth.username')) {
    System.setProperty('org.ajoberstar.grgit.auth.username', ext['org.ajoberstar.grgit.auth.username'].toString())
    System.setProperty('org.ajoberstar.grgit.auth.password', ext['org.ajoberstar.grgit.auth.password'].toString())
}

gitPublish {
    // where to publish to (repo must exist)
    repoUri = 'https://github.com/GameModsBR/NBT-Manipulator.git'

    // where to fetch from prior to fetching from the remote (i.e. a local repo to save time)
    //referenceRepoUri = file("$projectDir/gh-pages").toURI().toString()

    // branch will be created if it doesn't exist
    branch = 'gh-pages'

    // generally, you don't need to touch this
    repoDir.set(file("$buildDir/gh-pages-repo")) // defaults to $buildDir/gitPublish

    // what to publish, this is a standard CopySpec
    contents {
        from("$buildDir/javadoc") {
            into 'javadoc'
        }
        from("$buildDir/kdoc") {
            into 'kdoc'
        }
        from "$buildDir/pages"
        from 'src/pages'
        from 'README.md'
        from 'CHANGELOG.md'
    }

    // what to keep in the existing branch (include=keep)
    preserve {
        include '1.0.0/**'
        exclude '1.0.0/temp.txt'
    }

    // message used when committing changes
    commitMessage = 'Github Pages update' // defaults to 'Generated by gradle-git-publish'
}

gitPublishCopy.dependsOn dokkaJavadoc
gitPublishCopy.dependsOn createReadmeFiles
gitPublishCopy.dependsOn createIndexMd
